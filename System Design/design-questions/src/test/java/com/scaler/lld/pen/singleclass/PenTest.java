package com.scaler.lld.pen.singleclass;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertEquals;

import org.junit.Test;

import com.scaler.lld.pen.models.Ink;
import com.scaler.lld.pen.models.InkType;
import com.scaler.lld.pen.models.Nib;
import com.scaler.lld.pen.models.NibType;
import com.scaler.lld.pen.models.PenType;
import com.scaler.lld.pen.models.Refill;

public class PenTest {

    @Test
    public void testGelPenCreation() {

        Ink ink = new Ink("Black", 100, InkType.GEL);
        Nib nib = new Nib(0, NibType.GEL);
        Refill refill = new Refill(true, ink, nib);

        Pen gelPen = new Pen("Parker", "Gel Pen", PenType.GEL, 100.0, refill, null, null);
        assertNotNull("If ctor is called, then pen should not be null", gelPen);

        assertNotNull("If pen is GEL, then refill should not be null", gelPen.getRefill());
        assertNull("If pen is GEL, then ink should be null", gelPen.getInk());
        assertNull("If pen is GEL, then nib should be null", gelPen.getNib());

        assertEquals("If a pen is created, then capacity should be 100", gelPen.getRefill().getInk().getQuantity(),
                100);
    }

    @Test
    public void testFountainPenCreation() {

        Ink ink = new Ink("Black", 100, InkType.FOUNTAIN);
        Nib nib = new Nib(0, NibType.FOUNTAIN);

        Pen fountainPen = new Pen("Parker", "Fountain Pen", PenType.FOUNTAIN, 100.0, null, ink, nib);
        assertNotNull("If ctor is called, then pen should not be null", fountainPen);

        assertNull("If pen is FOUNTAIN, then refill should be null", fountainPen.getRefill());
        assertNotNull("If pen is FOUNTAIN, then ink should not be null", fountainPen.getInk());
        assertNotNull("If pen is FOUNTAIN, then nib should not be null", fountainPen.getNib());

        assertEquals("If a pen is created, then capacity should be 100", fountainPen.getInk().getQuantity(),
                100);
    }

}
